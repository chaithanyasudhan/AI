import pandas as pd
import itertools

# Define propositions
props = ['P', 'Q', 'R']

# Generate all truth assignments for P, Q, R
truth_values = list(itertools.product([False, True], repeat=3))

def implies(a, b):
    return (not a) or b

# Evaluate KB sentences and entailments
rows = []
for (P, Q, R) in truth_values:
    sentence1 = implies(Q, P)         # Q -> P
    sentence2 = implies(P, not Q)    # P -> ¬Q
    sentence3 = Q or R               # Q ∨ R

    kb_true = sentence1 and sentence2 and sentence3

    entail_R = R
    entail_R_implies_P = implies(R, P)
    entail_Q_implies_R = implies(Q, R)

    rows.append({
        'P': P, 'Q': Q, 'R': R,
        'Q->P': sentence1,
        'P->¬Q': sentence2,
        'Q∨R': sentence3,
        'KB True': kb_true,
        'Entail R': entail_R,
        'Entail R->P': entail_R_implies_P,
        'Entail Q->R': entail_Q_implies_R
    })

# Create DataFrame
df = pd.DataFrame(rows)

# Filter models where KB is true
models_where_KB_true = df[df['KB True']]

# Print full truth table
print("Full Truth Table:\n")
print(df.to_string(index=False))

# Checking entailments (whether KB entails each sentence)
# KB entails a sentence if the sentence is true in all models where KB is true
entail_R_result = models_where_KB_true['Entail R'].all()
entail_R_implies_P_result = models_where_KB_true['Entail R->P'].all()
entail_Q_implies_R_result = models_where_KB_true['Entail Q->R'].all()

print("\nModels where KB is True:")
print(models_where_KB_true.to_string(index=False))

print("\nEntailment Results:")
print(f"Does KB entail R? {'Yes' if entail_R_result else 'No'}")
print(f"Does KB entail R -> P? {'Yes' if entail_R_implies_P_result else 'No'}")
print(f"Does KB entail Q -> R? {'Yes' if entail_Q_implies_R_result else 'No'}")
