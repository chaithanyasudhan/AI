import math

# Represents the players
X = 'X'
O = 'O'
EMPTY = ' '

def check_winner(board):
    """
    Checks if there's a winner on the board.
    Returns X if X wins, O if O wins, None if no winner yet, or 'Tie' if full and no winner.
    """
    # Check rows
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != EMPTY:
            return row[0]
    # Check columns
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != EMPTY:
            return board[0][col]
    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != EMPTY:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != EMPTY:
        return board[0][2]

    # Check for tie (no winner and board is full)
    if all(cell != EMPTY for row in board for cell in row):
        return 'Tie'

    return None

def minimax(board, is_maximizing_player):
    """
    Implements the Minimax algorithm to find the optimal move.
    is_maximizing_player is True for 'X' (AI), False for 'O' (opponent).
    """
    winner = check_winner(board)
    if winner == X:
        return 1  # X wins, maximizing player gets a high score
    elif winner == O:
        return -1 # O wins, minimizing player gets a low score
    elif winner == 'Tie':
        return 0 # Tie game

    if is_maximizing_player:
        best_score = -math.inf
        for r in range(3):
            for c in range(3):
                if board[r][c] == EMPTY:
                    board[r][c] = X # Make the move
                    score = minimax(board, False)
                    board[r][c] = EMPTY # Undo the move
                    best_score = max(best_score, score)
        return best_score
    else: # Minimizing player
        best_score = math.inf
        for r in range(3):
            for c in range(3):
                if board[r][c] == EMPTY:
                    board[r][c] = O # Make the move
                    score = minimax(board, True)
                    board[r][c] = EMPTY # Undo the move
                    best_score = min(best_score, score)
        return best_score

def find_best_move(board):
    """
    Finds the best move for the AI (X) using the Minimax algorithm.
    """
    best_score = -math.inf
    best_move = None

    for r in range(3):
        for c in range(3):
            if board[r][c] == EMPTY:
                board[r][c] = X # Try the move
                score = minimax(board, False) # Evaluate the board state
                board[r][c] = EMPTY # Undo the move

                if score > best_score:
                    best_score = score
                    best_move = (r, c)
    return best_move

def print_board(board):
    """Prints the Tic-Tac-Toe board."""
    for row in board:
        print("|".join(row))
        print("-----")

# Example usage:
if __name__ == "__main__":
    # Initial empty board
    board = [[EMPTY, EMPTY, EMPTY],
             [EMPTY, EMPTY, EMPTY],
             [EMPTY, EMPTY, EMPTY]]

    current_player = X

    while check_winner(board) is None:
        print_board(board)
        if current_player == X:
            print("AI's turn (X)")
            move = find_best_move(board)
            if move:
                board[move[0]][move[1]] = X
            else:
                print("No valid moves left for AI.")
                break
        else:
            print("Human's turn (O)")
            while True:
                try:
                    row = int(input("Enter row (0-2): "))
                    col = int(input("Enter column (0-2): "))
                    if 0 <= row <= 2 and 0 <= col <= 2 and board[row][col] == EMPTY:
                        board[row][col] = O
                        break
                    else:
                        print("Invalid move. Try again.")
                except ValueError:
                    print("Invalid input. Please enter numbers.")
        
        current_player = O if current_player == X else X

    print_board(board)
    final_result = check_winner(board)
    if final_result == 'Tie':
        print("It's a Tie!")
    elif final_result:
        print(f"Player {final_result} wins!")
    else:
        print("Game ended unexpectedly.")
